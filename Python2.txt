Lambda Expressions
------------------

A lambda expressions is an anonymous function without a name and without a def keyword

A lambda expression can take any number of arguments but can have only one expression.

def add(a,b):
	return a+b


add = lambda a,b:a+b

add(10,20)




syntax:
------

lambda argumentlist : expression



lambda a,b : a+b



def bigger(a,b):
		if a > b:
			return a
		else:
			return b






lambda a,b : a if a>b else b


Pros
----
1. Suitable for simple logical operations
2. When we want one expression in return, we use the lambda expression
3. lambda function is used as a parameter to different functions such as map, filter etc.,

Cons
----
1. Lambda can evaluate only one expression
2. We cannot write a doc-string to explain all inputs, operations and outputs as you would in a normal
   definition.
3. Lambda functions are not used when we have multi lines of code.



in python no need to assign a lambda expression to a variable we can directly call it

(lambda x, y : x*y)(10,20)  --> returns 200


# Example of lambda function using if-else
Max = lambda a, b : a if(a > b) else b
print(Max(1, 2))



we can pass keyword arguments for a lambda expression

product= lambda x,y,z : x*y*z

product(z=10,x=2,y=3)


we can also use default arguments in lambda expression

product = lambda x,y,z=10 : x*y*z
product(10,20)



we can also use * to have variable arguments

addition =lambda *args : sum(args)


addition(10,20)
addition(10,20,30)
addition(10,20,30,40)
addition()


higher order lambda expressions, ie we can pass another function / lambda expression to a lamdba expression

higher_order = lambda x, fun : x + fun(x)

higher_order(20, lambda x:x*x)


(lambda x : (x%2 and 'odd' or 'even'))(10)


lambda to check the given string is a substring of a given string or not
------------------------------------------------------------------------
sub_string = lambda str : str in "python programming language"


sub_string('java')  --> false
sub_string("python') --> True
sub_string('Python') ---> False



List Comprehension
------------------

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist) 



nlist = [x for x in fruits if "a" in x ]


nlist = [x for x in fruits if "a" in x]


Python List comprehension provides a much more short syntax for creating a new list based on the values of an existing list.

Advantages of List Comprehension

    More time-efficient and space-efficient than loops.
    Require fewer lines of code.
    Transforms iterative statement into a formula.

syntax:
-------

newList = [ expression(element) for element in oldList if condition ] 


# Using list comprehension to iterate through loop
List = [character for character in [1, 2, 3]]


list = [i for i in range(11) if i % 2 == 0]
print(list)


# Getting square of from 1 to 10
squares = [n**2 for n in range(1, 11)]


# Display square of even numbers
print(squares)



matrix = [[j for j in range(3)] for i in range(3)]
print(matrix)


# Reverse each string in tuple
List = [string[::-1] for string in ('Geeks', 'for', 'Geeks')]

# Display list
print(List)


List comprehension to use user defined function
-----------------------------------------------

# Explicit function
def digitSum(n):
	dsum = 0
	for ele in str(n):
		dsum += int(ele)
	return dsum


# Initializing list
List = [367, 111, 562, 945, 6726, 873]

# Using the function on odd elements of the list
newList = [digitSum(i) for i in List if i & 1]

# Displaying new list
print(newList)




using filter method
-------------------


x=list(filter(lambda, collection))


num = [10,40,56,27,33,15,70]

f1 = lambda x : x > 30

x = list(filter(f1,num))
print(x)



filter(lambda n : n >30, num)


greater = list(filter(lambda num: num >30, num))
print(greater)



data = [10,40,56,27,33,15,70]
result = list(filter(lambda x: x%4==0, data))



Filter out all odd numbers using filter() and lambda function
-------------------------------------------------------------
li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]
 
final_list = list(filter(lambda x: (x % 2 != 0), li))
print(final_list)





Map method
----------
data = [10,40,56,27,33,15,70]
result = list( map(lambda x: x+1, data))
print(result)


# using lambda to print table of 10 using list comprehension
numbers = list(map(lambda i: i*10, [i for i in range(1, 6)])) // [1,2,3,4,5]

print(numbers)




Reduce Method
--------------
It is used to roll the result to next number

reduce method is available in functools module so need to import it

from functools import reduce

list4 = [2,5,10,6,4,12]
sum = reduce( (lambda x,y : x*y), list4)
print(sum)


using lambda in user defined function
-------------------------------------

>>> def quadratic(a,b,c):
...     return lambda x: a*x**2 + b*x +c
...
>>> f= quadratic(2,3,5)
>>> f(1)
>>> f(2)


File Handling
-------------

f = open(filename, mode)

modes are:

r = read 
w = write an existing a file

a: appending a data, it wont overrides existing data

r+ = to read and write the data, previous data will be overriden

w+ = to write and read data, it will override the previous data

a+ = to append and read data frpm file, it wont override the previous data


to read and print the contents of a file
----------------------------------------

# a file named "geek", will be opened with the reading mode.
file = open('geek.txt', 'r')
# This will print every line one by one in the file
for each in file:
	print (each)


file.read() // this will display total contents atonce


print (file.read(5)) // this will print the first 5 characters from the file


To write the contents to a file
-------------------------------
# Python code to create a file
file = open('sample.txt','w')
file.write("This is the write command")
file.write("It allows us to write in a particular file")
file.close()



to use append method in file ops
--------------------------------
# Python code to illustrate append() mode
file = open('sample.txt', 'a')
file.write("This will add this line")
file.close()


# Python code to illustrate with()
with open("file.txt") as file:
	data = file.read()
# do something with data



# Python code to illustrate with() alongwith write()
with open("file.txt", "w") as f:
	f.write("Hello World!!!")


# Python code to illustrate split() function
with open("sample.txt", "r") as file:
	data = file.readlines()
	for line in data:
		word = line.split()
		print (word)



Working with csv files
----------------------

What is a CSV?

CSV stands for “Comma Separated Values.” 
It is the simplest form of storing data in tabular form as plain text

structure of csv file
---------------------

experience,salary
1.1,45000
2,60000
2.1,62000
1,40000


to read data from csv file, we have many ways one of its is using csvreader

steps to read data using csvreader

1. import csv from library

	import csv

2. open the csv file
	file = open("test.csv")

3. Use the csv.reader object to read the CSV file.
    csvreader = csv.reader(file)

4. Extract the field names.
	
	Create an empty list called a header. Use the next() method to obtain the header.

	The .next() method returns the current row and moves to the next row.

     header = []		
	header = next(csvreader)


5. Extract the rows/records. 
   Create an empty list called rows and iterate through the csvreader object and append each row to the rows list.

   rows = []
   for row in csvreader:
        rows.append(row)
   rows

6. Close the file
    file.close()


using with keyword
------------------

import csv
rows = []
with open("Salary_Data.csv", 'r) as file:
    csvreader = csv.reader(file)
    header = next(csvreader)
    for row in csvreader:
        rows.append(row)
print(header)
print(rows)


by using readLines method also we can fetch data from csv files
---------------------------------------------------------------
with open('Salary_Data.csv') as file:
    content = file.readlines()
header = content[:1]
rows = content[1:]
print(header)
print(rows)



Steps to write to a csv file
----------------------------

1. Import csv library.
2. Define a filename and Open the file using open().
3. Create a csvwriter object using csv.writer().
4. Write the header.
5. Write the rest of the data.


header = ['Name', 'M1 Score', 'M2 Score']
data = [['Alex', 62, 80], ['Brad', 45, 56], ['Joey', 85, 98]]
filename = 'd://Students_Data.csv'
with open(filename, 'w', newline="") as file:
    csvwriter = csv.writer(file) # 2. create a csvwriter object
    csvwriter.writerow(header) # 4. write the header
    csvwriter.writerows(data) # 5. write the rest of the data



using writeLines() method
-------------------------
header = ['Name', 'M1 Score', 'M2 Score']
data = [['Alex', 62, 80], ['Brad', 45, 56], ['Joey', 85, 98]]
filename = 'Student_scores.csv'
with open(filename, 'w') as file:
    for header in header:
        file.write(str(header)+', ')
    file.write('n')
    for row in data:
        for x in row:
            file.write(str(x)+', ')
        file.write('n')






